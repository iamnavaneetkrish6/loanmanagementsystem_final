package com.hexaware.loanmanagementsystem.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hexaware.loanmanagementsystem.dto.CustomerLoanInformationDTO;
import com.hexaware.loanmanagementsystem.dto.LoanApplyDetailsDTO;
import com.hexaware.loanmanagementsystem.dto.PropertyDetailDTO;
import com.hexaware.loanmanagementsystem.entity.CustomerDetails;
import com.hexaware.loanmanagementsystem.entity.LoanApplyDetails;
import com.hexaware.loanmanagementsystem.entity.LoanType;
import com.hexaware.loanmanagementsystem.entity.PropertyDetail;
import com.hexaware.loanmanagementsystem.repository.CustomerDetailsRepository;
import com.hexaware.loanmanagementsystem.repository.LoanApplyDetailsRepository;
import com.hexaware.loanmanagementsystem.repository.LoanTypesRepository;

@Service
public class LoanApplyDetailsServiceImp implements ILoanApplyDetailsService {

	@Autowired
	private LoanApplyDetailsRepository loanApplyDetailsRepository;

	@Autowired
	private CustomerDetailsRepository customerDetailsRepository;

	@Autowired
	private LoanTypesRepository loanTypeRepository;

	@Autowired
	private ICustomerLoanInformationService customerLoanInformationService;

	@Override
	public LoanApplyDetails createLoanApplyDetails(LoanApplyDetailsDTO loanApplyDetailDto) {

		LoanApplyDetails loanApplyDetail = new LoanApplyDetails();
		loanApplyDetail.setLoanTypeName(loanApplyDetailDto.getLoanTypeName());
		loanApplyDetail.setLoanAmount(loanApplyDetailDto.getLoanAmount());
		loanApplyDetail.setLoanApplyDate(loanApplyDetailDto.getLoanApplyDate());
		loanApplyDetail.setPropertyAddress(loanApplyDetailDto.getPropertyAddress());
		loanApplyDetail.setCustomerName(loanApplyDetailDto.getCustomerName());

		// mapping btw loantype and loanapply

		LoanType loanType = loanTypeRepository.findByLoanTypeName(loanApplyDetailDto.getLoanTypeName());

		loanApplyDetail.setLoantype(loanType); // change at last

		loanType.getLoanApplyDetails().add(loanApplyDetail);

		// mapping btw customer and loan apply

		CustomerDetails customerDetails = customerDetailsRepository
				.findByCustomerName(loanApplyDetailDto.getCustomerName());

		loanApplyDetail.setCustomerDetails(customerDetails); // change at last

		customerDetails.getLoanApplyDetails().add(loanApplyDetail);

		// loan information call automatic create the loan information

		CustomerLoanInformationDTO customerLoanInformationDTO = new CustomerLoanInformationDTO();
		customerLoanInformationDTO.setLoanNumber(loanApplyDetailDto.getLoanNo());
		customerLoanInformationDTO.setLoanAmount(loanApplyDetailDto.getLoanAmount());
		customerLoanInformationDTO.setCustomerName(loanApplyDetailDto.getCustomerName());

		customerLoanInformationService.createCustomerLoanInformation(customerLoanInformationDTO);

		return loanApplyDetailsRepository.save(loanApplyDetail);
	}

	@Override
	public LoanApplyDetails updateApplyDetails(LoanApplyDetailsDTO loanApplyDetailDto) {

		LoanApplyDetails loanApplyDetail = new LoanApplyDetails();
		loanApplyDetail.setLoanApplyDate(loanApplyDetailDto.getLoanApplyDate());

		return loanApplyDetailsRepository.save(loanApplyDetail);
	}

	@Override
	public void deleteApplyDetails(long loanApplyDetailId) {

		loanApplyDetailsRepository.deleteById(loanApplyDetailId);

	}

	@Override
	public LoanApplyDetails getloanDetailsByLoanNumber(long loanNumber) {

		return loanApplyDetailsRepository.findById(loanNumber).orElse(new LoanApplyDetails());
	}

	@Override
	public List<LoanApplyDetails> getAllLoanDetails() {
		// TODO Auto-generated method stub

		return loanApplyDetailsRepository.findAll();
	}

	
	// for mapping btw loanapply and property details
	@Override
	public void addPropertyDetailsToLoanApplyDetails(PropertyDetailDTO propertyDetailDto) {

		LoanApplyDetails loanApplyDetails = loanApplyDetailsRepository
				.findByCustomerName(propertyDetailDto.getPropertyOwner());
		PropertyDetail propertyDetail = new PropertyDetail();
		propertyDetail.setPropertyId(propertyDetailDto.getPropertyId());
		propertyDetail.setPropertyOwner(propertyDetailDto.getPropertyOwner());
		propertyDetail.setPropertyAddress(propertyDetailDto.getPropertyAddress());
		propertyDetail.setPropertyValue(propertyDetailDto.getPropertyValue());
		loanApplyDetails.setPropertyDetail(propertyDetail);

		loanApplyDetailsRepository.save(loanApplyDetails);

	}

	@Override
	public LoanApplyDetails getloanDetailsByCustomerName(String customerName) {

		return loanApplyDetailsRepository.findByCustomerName(customerName);
	}

}
